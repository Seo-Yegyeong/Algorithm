[Linked list]

1. 특징
    - Node(노드): '데이터'와 '다음 노드를 가리키는 포인터' 값을 가짐
    - 데이터를 순차적으로 저장하지만, 메모리 공간은 불연속
    - 삽입/삭제가 자주 일어날 때 유리함



2. 시간 복잡도 (Time complexity)
    Access : O(n)  //인덱스로 직접 접근 불가 → 처음부터 순회해야 함
    Search : O(n)  //원하는 값을 찾기 위해 처음부터 탐색
    Insert : O(1) (원하는 값이 초반에 위치할 때)
             O(n) (중간 or 끝에 위치할 때)  //위치만 알면 빠르게 삽입 가능
    Delete : (↑ Insert와 동일 ↑)



3. 언제 Linked list를 활용하는 게 좋을까?
    - 삽입/삭제가 자주 발생하는 경우
    - 동적 메모리 할당이 필요한 경우 (배열은 크기 고정)
    - 요소를 연속된 메모리에 저장하지 않아도 되는 경우



4. Linked list의 단점
    - 인덱스로 직접 접근이 불가능 → 매번 순회해야 함
    - 오버헤드: 포인터(next) 저장 공간 필요
    - 구현이 배열보다 복잡
    